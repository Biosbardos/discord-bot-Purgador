// Importar m√≥dulos necesarios
const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const schedule = require('node-schedule');

// ======== CONSTANTES Y CONFIGURACI√ìN ========
const TOKEN = 'TOKEN'; // Reemplaza con tu token
const IMAGE_PATHS = {
  esencia: './esencia.gif',  // Imagen para el comando "esencia"
  sleep: './Sleep.png',     // Imagen para el mensaje programado
};
const CANAL_ID_MENSAJE_NOCTURNO = 'CHANNEL ID'; // ID del canal para mensajes programados
const ROLE_ID_TO_IGNORE = 'BOTS ROLE ID'; // ID del rol de los BOTS
const CANAL_ID_ADMINS = 'CHANNEL ID'; // Reemplaza con el ID del canal espec√≠fico
const INTERVALOS_MINUTOS = [1, 5, 10]; // Intervalos disponibles en minutos
let intervalo = null; // Variable global para controlar el temporizador de mensajes repetitivos
const CANAL_ESPECIFICO_ID = 'CHANNEL ID'
const CANAL_ID_REACCION = 'CHANNEL ID'; // ID del canal donde reaccionar
const REACCION = '‚ùå'; // Cambia por el emoji que quieras usar


// Crear una instancia del cliente de Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

// ======== EVENTOS DEL BOT ========

// Evento: intento de inicio de sesi√≥n con el bot
client.login(TOKEN)
  .then(() => {
    //Evento: mandar informaci√≥n relevante una vez el bot inicie sesi√≥n correctamente
    client.once('ready', () => {
      console.log(`‚úÖ Bot conectado exitosamente como ${client.user.username} ‚úÖ`);
      console.log(`Hora actual del sistema: ${new Date().toLocaleString()}`);
      programarEnvioDeImagen();
    });
  })
  //Manejo de errores al iniciar sesi√≥n
  .catch((error) => {
    console.error('‚ùå Error al iniciar sesi√≥n con el bot: ‚ùå', error);
  });

// Evento: manejo de comandos
client.on('messageCreate', async (message) => {
  const member = await message.guild.members.fetch(message.author.id);

  if (member.roles.cache.has(ROLE_ID_TO_IGNORE)) return; //if (message.author.bot) return; // Ignorar mensajes de bots (pero es medio raro no s√© c√≥mo va exactamente el author.bot y es mejor, m√°s eficiente y m√°s completo poner el rol que poseen todos los bots)

  // Respuestas a comandos espec√≠ficos
  manejarComandos(message);
});

//Evento: reacci√≥n de mensajes en #Canal concreto
client.on('messageCreate', async (message) => {
  // Verificar que el mensaje sea en el canal espec√≠fico
  if (message.channel.id !== CANAL_ID_REACCION) return;

  try {
    // Obtener el miembro que envi√≥ el mensaje
    const member = await message.guild.members.fetch(message.author.id);

    // Verificar si el miembro tiene el rol a ignorar
    if (member.roles.cache.has(ROLE_ID_TO_IGNORE)) return;

    // A√±adir reacci√≥n al mensaje
    await message.react(REACCION);
  } catch (error) {
    console.error('‚ùå Error al reaccionar al mensaje: ‚ùå', error);
  }
});

// ======== FUNCIONES ========

/**
 * Maneja los comandos enviados por los usuarios en los canales donde el bot tiene acceso.
 * @param {Message} message - Mensaje recibido en el canal
 */
async function manejarComandos(message) {
  const args= message.content.trim().split(/ +/); //Divide le mensaje en palabras separadas por espacios
  const comando = args[0].toLowerCase(); //Obteniene el comando (Primera palabra de la cadena mensaje)
  const parametro = args[1]; //Obtiene el parametro num√©rico (si existe)

  switch (comando) {
    case '-comandos':
      mostrarComandos(message);
      break;
    case 'esencia': //Sobre este caso en espec√≠fico, ya que puse JA JA JA JA, cre√≠ que quedaba mejor poner el texto abajo, implicando usar una funci√≥n sobrecargada (lo cual no se puede en js) as√≠ que opt√© por un booleano
      enviarImagen(message,  IMAGE_PATHS.esencia, 'JA JA JA JA', true);  //Puse JA JA JA JA, pero funciona sin mandar nada de content aunque sea parametro de la funci√≥n (extra√±o js)
      //enviarMensaje(message, 'https://tenor.com/es/view/broly-villain-laughing-dragon-ball-z-dbz-gif-17670507'); OPCI√ìN mucho m√°s f√°cil y eficiente, pero no me gusta como lo manda. Se tratar√° como imagen mejor
      break;
    case '7 palabras':
      enviarMensaje(message,'esencia');
      break;
    case '-help':
      enviarMensaje(message,'Preg√∫ntale al Bios');
      break;
    case '-borrar':{
      //Valida el argumento como n√∫mero y en un rango determinado
      const cantidad = parseInt(parametro, 10);
      if (!cantidad || cantidad <=0 || cantidad >100){
        return message.reply ('‚ùå Por favor, especifica un n√∫mero v√°lido entre 1 y 100 para borrar mensajes. ‚ùå');
      }
      await borrarMensajes(message, cantidad);
      break;
    }
    case '-function.on':
      gestionarMensajesRepetidos(message, true);
      break;
    case '-function.off':
      gestionarMensajesRepetidos(message, false);
      break;
    default:
      // No hacer nada si no coincide con ning√∫n comando
      break;
  }
}

/**
 * Env√≠a una imagen  y un texto (dos mensajes) al canal donde se recibi√≥ el mensaje.
 * @param {Message} message - Mensaje recibido
 * @param {string} imagePath - Ruta de la imagen a enviar
 * @param {string} content - Mensaje de texto que acompa√±a a la imagen
 * @param {boolean} inverso - Si es `true`, env√≠a primero la imagen y luego el texto.
 */
async function enviarImagen(message, imagePath, content, inverso = false) { // Tiene que ser as√≠ncrona para que los mensajes se manden bien en orden y tiene que ser dos porque discord impone que si mandas en un mensaje imagen o gif y texto el texto arriba, jefe.
  try{
    // Configuraci√≥n de par√°metros seg√∫n el valor de `inverso`
    if(inverso){
      // Imagen primero
      await message.channel.send ({ files: [imagePath] });
      await message.channel.send (content);
    }else{
      // Texto primero
      await message.channel.send (content);
      await message.channel.send ({ files: [imagePath] });
    }
  } catch (error){
    console.error('Error al enviar la imagen o el texto:', error)
  }
}

/**
 * Env√≠a un mensaje al canal donde se recibi√≥ el mensaje.
 * @param {Message} message - Mensaje recibido
 * @param {string} content - Mensaje de texto que responde al mensaje inicial
 */
function enviarMensaje (message, content){
  message.channel
    .send({
      content,
    })
    .catch((error) => console.error ('Error al enviar el mensaje:', error));
}

/**
 * Programa el env√≠o de una imagen a un canal espec√≠fico a las 12:00 AM cada d√≠a.
 */
function programarEnvioDeImagen() {
  schedule.scheduleJob('0 0 * * *', async () => {
    const channel = client.channels.cache.get(CANAL_ID_MENSAJE_NOCTURNO);

    if (channel) {
      try {
        await channel.send({
          content: '¬°Buenas noches! @here a dormir todo el mundo.',
          files: [IMAGE_PATHS.sleep],
        });
        console.log('üåô Imagen de buenas noches enviada a las 00:00 AM üåô');
      } catch (error) {
        console.error('Error al enviar la imagen programada:', error);
      }
    } else {
      console.error('No se pudo encontrar el canal para el mensaje programado.');
    }
  });
}

/**
 * Muestra una lista de comandos dependiendo del rol del usuario.
 * Si es administrador, recibe comandos administrativos por DM,
 * excepto en un canal espec√≠fico para Admins donde se muestra todo en p√∫blico.
 * @param {object} message - Mensaje original.
 */
function mostrarComandos(message) {
  const comandosGenerales = `
**Comandos Generales:**

- **-comandos**: Muestra todos los comandos disponibles.
- **esencia**: Muestra la verdadera esencia.
- **7 palabras**: Esencia.
- **-help**: A ver, no s√©, si ya usaste -comandos para lo que se supone que hace esto... Emmm... Es -comandos "avanzado".
- **-function.on**: Activa mensajes repetitivos [**TEMPORAL** no abusen de esto que apago el bot y lo capo].
- **-function.off**: Desactiva mensajes repetitivos.
`;

  const comandosAdministrador = `
**Comandos Exclusivos para Administradores:**

- **-borrar <n√∫mero>**: Elimina los √∫ltimos mensajes (a elegir cantidad) en el canal.
- **-bot on**: Activa el bot.
- **-bot off**: Desactiva el bot.
`;

  if (esAdministrador(message)) {
    if (message.channel.id === CANAL_ID_ADMINS) {
      // En el canal exclusivo de Admins, muestra todo en p√∫blico
      message.channel.send({
        content: `${message.author}, aqu√≠ tienes todos los comandos disponibles:`,
        embeds: [
          {
            title: "üîíüìú **COMANDOS GENERALES Y ADMINISTRATIVOS** üìúüîí",
            description: comandosGenerales + comandosAdministrador,
            color: 0x00ff00, // Verde
            footer: {
              text: "Como est√°s en el canal exclusivo, no recibir√°s un mensaje privado.",
            },
          },
        ],
      });
    } else {
      // En otros canales, manda generales en p√∫blico y administrativos por DM
      message.channel.send({
        content: `${message.author}, aqu√≠ tienes la lista de comandos generales:`,
        embeds: [
          {
            title: "üìú **COMANDOS GENERALES** üìú",
            description: comandosGenerales,
            color: 0x0000ff, // Azul
          },
        ],
      });

      // Enviar comandos de administrador por DM
      message.author
        .send({
          embeds: [
            {
              title: "üîí **COMANDOS EXCLUSIVOS PARA ADMINISTRADORES** üîí",
              description: comandosAdministrador,
              color: 0xff0000, // Rojo
              footer: {
                text: `USAR CON PRECAUCI√ìN, un gran poder conlleva una gran corrupci√≥n`,
              },
            },
          ],
        })
        .then(() => {
          //Enviar un segundo mensaje con el contenido adicional
          return message.author.send(
            `Si prefieres no recibir este mensaje, usa el comando en el canal exclusivo para Admins (<#CHANNEL ID>).`, //Puesto as√≠ porque dentro del embed (text) no se puede hacer referencia al canal y puesto como then dentro de funci√≥n as√≠ncrona porque en un √∫nico mensaje Discord impone que el texto simple vaya encima del embed
          );
        })
        .catch((error) =>
          console.error('Error al enviar el mensaje directo al administrador:', error)
        );
    }
  } else {
    // Para usuarios no administradores, solo mostrar comandos generales
    message.channel.send({
      content: `${message.author}, aqu√≠ tienes la lista de comandos generales:`,
      embeds: [
        {
          title: "üìú **COMANDOS GENERALES** üìú",
          description: comandosGenerales,
          color: 0x0000ff, // Azul
        },
      ],
    });
  }
}

/**
 * Elimina un n√∫mero de mensajes en un canal.
 * @param {object} message - Mensaje original.
 * @param {number} cantidad - Cantidad de mensajes a borrar.
 */
async function borrarMensajes(message, cantidad) {
  if (!esAdministrador(message)) {
    message.reply('‚ùå Solo los administradores pueden usar este comando. ‚ùå');
    return;
  }
  if (cantidad < 1 || cantidad > 100) { //100 es un l√≠mite impuesto por Discord
    message.reply('‚ùå Especifica un n√∫mero entre 1 y 100. ‚ùå');
    return;
  }
  try {
    const mensajes = await message.channel.messages.fetch({ limit: cantidad + 1 });
    await message.channel.bulkDelete(mensajes, true);
    message.channel.send(`‚úÖ Se han eliminado ${mensajes.size - 1} mensajes (sin incluir el propio comando). ‚úÖ`);
  } catch (error) {
    console.error('Error al borrar mensajes:', error);
    message.channel.send('‚ùå Ocurri√≥ un error al intentar borrar los mensajes. ‚ùå');
  }
}

/**
 * Gestiona la activaci√≥n o desactivaci√≥n de mensajes repetitivos en un canal espec√≠fico.
 * @param {boolean} activar - `true` para activar, `false` para desactivar.
 * @param {object} message - Mensaje original de Discord.
 */
async function gestionarMensajesRepetidos(message, activar) {
  const canal = message.client.channels.cache.get(CANAL_ESPECIFICO_ID);

  if (!canal) {
    message.channel.send('‚ùå Canal incorrecto para la funci√≥n. ‚ùå');
    console.error('Error: Canal no encontrado.');
    return;
  }

  if (activar) {
    // Verificar si ya est√° activo
    if (intervalo) {
      return message.channel.send('‚úÖ Los mensajes repetitivos ya est√°n activos. ‚úÖ');
    }

    // Crear botones para intervalos
    const filaBotones = new ActionRowBuilder();
    INTERVALOS_MINUTOS.forEach((minutos) => {
      filaBotones.addComponents(
        new ButtonBuilder()
          .setCustomId(`intervalo_${minutos}`)
          .setLabel(`${minutos} minutos`)
          .setStyle(ButtonStyle.Primary)
      );
    });

    // Enviar mensaje con botones
    const mensajeBotones = await message.channel.send({
      content: 'üìã Selecciona un intervalo para los mensajes repetitivos: üìã',
      components: [filaBotones],
    });

    // Crear un collector para manejar las interacciones
    const filtro = (i) => i.user.id === message.author.id; // Asegura que solo el autor del comando interact√∫e
    const collector = mensajeBotones.createMessageComponentCollector({ filter: filtro, time: 60000 });

    collector.on('collect', async (interaction) => {
      const minutosSeleccionados = parseInt(interaction.customId.split('_')[1], 10);
      const intervaloTiempo = minutosSeleccionados * 60 * 1000; // Conversi√≥n a milisegundos

      // Iniciar el temporizador
      intervalo = setInterval(() => {
        canal.send('üì¢ <@PERSONAL ID> Chambea. üì¢')
          .catch((error) => console.error('Error al enviar el mensaje:', error));
      }, intervaloTiempo);

      await interaction.reply(`‚úÖ Mensajes repetitivos activados. Intervalo: ${minutosSeleccionados} minutos. ‚úÖ`);
      collector.stop(); // Detener el collector
    });

    collector.on('end', (_, reason) => {
      if (reason === 'time') {
        mensajeBotones.edit({ content: '‚è≥ Tiempo agotado. No se activaron los mensajes repetitivos. ‚è≥', components: [] });
      }
    });
  } else {
    // Desactivar mensajes repetitivos
    if (!intervalo) {
      return message.channel.send('‚ùå No hay mensajes repetitivos activos para detener. ‚ùå');
    }

    clearInterval(intervalo);
    intervalo = null;
    message.channel.send('‚èπÔ∏è Mensajes repetitivos desactivados. ‚èπÔ∏è');
  }
}

/**
 * Verifica si el usuario que envi√≥ el mensaje tiene permisos de administrador.
 * @param {object} message - Mensaje original.
 * @returns {boolean} `true` si es administrador, `false` de lo contrario.
 */
function esAdministrador(message) {
  return message.member.permissions.has('Administrator');
}